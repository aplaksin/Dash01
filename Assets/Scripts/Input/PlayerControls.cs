//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""SwipeMove"",
            ""id"": ""9e8d3389-7ea5-4c47-8dee-707559b4613e"",
            ""actions"": [
                {
                    ""name"": ""TouchPrimary"",
                    ""type"": ""PassThrough"",
                    ""id"": ""62463695-e0a7-48e1-a976-9c32a6b15582"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3d7a3200-e7e3-469a-82d1-fd63f05adedb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4fc07c8-10c8-4870-b301-7d893c1313ba"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SwipeMoveScheme"",
                    ""action"": ""TouchPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98ab1c43-9cd8-4ba8-8862-6a485f67c7dc"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SwipeMoveScheme"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""c36c6864-386e-4eba-a17b-13ec0c2da59b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b93b1dbd-75d9-4145-9b67-c806f084927b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4f1f6a93-9eec-4120-8ef7-e3d3b273fdc4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2ebada0e-07ee-4640-b876-16fa79fe0ca8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cd3feaec-a8a8-4162-b6f9-4a7d7ecb900d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""739f6bae-6ab1-46b0-ad0c-2fbb645522d9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a37b27e-6e27-4f74-809f-e6bd6446ec7c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""f48f228c-19ae-4ff4-9c88-c8bb43cb3763"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""249ad8b5-a604-4526-a7f1-b595e6470709"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b9747b10-747b-4ebd-8920-e7b11319774d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""74692814-9d63-4cdd-888b-1b7878c6b72d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bb9619a6-82fe-4d61-9705-a482bd01cba6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""SwipeMoveScheme"",
            ""bindingGroup"": ""SwipeMoveScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardMoveScheme"",
            ""bindingGroup"": ""KeyboardMoveScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SwipeMove
        m_SwipeMove = asset.FindActionMap("SwipeMove", throwIfNotFound: true);
        m_SwipeMove_TouchPrimary = m_SwipeMove.FindAction("TouchPrimary", throwIfNotFound: true);
        m_SwipeMove_TouchPosition = m_SwipeMove.FindAction("TouchPosition", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Move = m_Keyboard.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwipeMove
    private readonly InputActionMap m_SwipeMove;
    private List<ISwipeMoveActions> m_SwipeMoveActionsCallbackInterfaces = new List<ISwipeMoveActions>();
    private readonly InputAction m_SwipeMove_TouchPrimary;
    private readonly InputAction m_SwipeMove_TouchPosition;
    public struct SwipeMoveActions
    {
        private @PlayerControls m_Wrapper;
        public SwipeMoveActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPrimary => m_Wrapper.m_SwipeMove_TouchPrimary;
        public InputAction @TouchPosition => m_Wrapper.m_SwipeMove_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_SwipeMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwipeMoveActions set) { return set.Get(); }
        public void AddCallbacks(ISwipeMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_SwipeMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwipeMoveActionsCallbackInterfaces.Add(instance);
            @TouchPrimary.started += instance.OnTouchPrimary;
            @TouchPrimary.performed += instance.OnTouchPrimary;
            @TouchPrimary.canceled += instance.OnTouchPrimary;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
        }

        private void UnregisterCallbacks(ISwipeMoveActions instance)
        {
            @TouchPrimary.started -= instance.OnTouchPrimary;
            @TouchPrimary.performed -= instance.OnTouchPrimary;
            @TouchPrimary.canceled -= instance.OnTouchPrimary;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
        }

        public void RemoveCallbacks(ISwipeMoveActions instance)
        {
            if (m_Wrapper.m_SwipeMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwipeMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_SwipeMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwipeMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwipeMoveActions @SwipeMove => new SwipeMoveActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_Move;
    public struct KeyboardActions
    {
        private @PlayerControls m_Wrapper;
        public KeyboardActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Keyboard_Move;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    private int m_SwipeMoveSchemeSchemeIndex = -1;
    public InputControlScheme SwipeMoveSchemeScheme
    {
        get
        {
            if (m_SwipeMoveSchemeSchemeIndex == -1) m_SwipeMoveSchemeSchemeIndex = asset.FindControlSchemeIndex("SwipeMoveScheme");
            return asset.controlSchemes[m_SwipeMoveSchemeSchemeIndex];
        }
    }
    private int m_KeyboardMoveSchemeSchemeIndex = -1;
    public InputControlScheme KeyboardMoveSchemeScheme
    {
        get
        {
            if (m_KeyboardMoveSchemeSchemeIndex == -1) m_KeyboardMoveSchemeSchemeIndex = asset.FindControlSchemeIndex("KeyboardMoveScheme");
            return asset.controlSchemes[m_KeyboardMoveSchemeSchemeIndex];
        }
    }
    public interface ISwipeMoveActions
    {
        void OnTouchPrimary(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
